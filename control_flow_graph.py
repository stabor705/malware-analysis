from typing import List, Dict, Tuple
from copy import deepcopy

import networkx as nx
import matplotlib.pylab as plt

OpCode = str
Disassembly = List[OpCode]
OpCodeHistogram = Dict[Tuple[OpCode, OpCode], float]

class ControlFlowGraph():
    def __init__(self, disassembly: Disassembly):
        histogram = ControlFlowGraph.calc_opcode_pairs_histogram(disassembly)
        self.graph = ControlFlowGraph.graph_from_dict(histogram)

    @staticmethod
    def calc_opcode_pairs_histogram(disassembly: Disassembly) -> OpCodeHistogram:
        histogram = dict()
        for opcode_pair in zip(disassembly[0:-1], disassembly[1:]):
            histogram.setdefault(opcode_pair, 0)
            histogram[opcode_pair] += 1
        return ControlFlowGraph.adjust_weights(histogram)
    
    @staticmethod
    def adjust_weights(histogram: OpCodeHistogram) -> OpCodeHistogram:
        new_histogram = deepcopy(histogram)

        def calc_row_sum(opcode: OpCode):
            return sum([w for (opcode_first, _), w in histogram.items() if opcode_first == opcode])

        for opcode_pair in histogram.keys():
            s = calc_row_sum(opcode_pair[0])
            new_histogram[opcode_pair] /= s
        
        return new_histogram

    @staticmethod
    def graph_from_dict(histogram: OpCodeHistogram) -> nx.DiGraph:
        graph = nx.DiGraph()
        for (opcode1, opcode2), w in histogram.items():
            graph.add_edge(opcode1, opcode2, weight = w)
        return graph

    def draw(self):
        pos = nx.spring_layout(self.graph)
        displayed_weights = {opcode_pair: round(weight, 2) for opcode_pair, weight in nx.get_edge_attributes(self.graph, "weight").items()}

        nx.draw_networkx_nodes(self.graph, pos, node_size=1000, node_color='red')
        nx.draw_networkx_labels(self.graph, pos, font_color='white')
        nx.draw_networkx_edges(self.graph, pos, min_target_margin=18)
        nx.draw_networkx_edge_labels(self.graph, pos, displayed_weights)
        plt.show()

        

if __name__ == "__main__":
    disassembly = ['cmp', 'jne', 'inc', 'mov', 'call', 'mov', 'mov', 'cmp', 'je', 'cmp', 'je', 'mov', 'cmp', 'je', 'add', 'jnz', 'dec', 'jne', 'inc', 'push', 'pop', 'jmp', 'dec', 'cmp', 'je', 'push', 'push', 'call', 'pop', 'pop', 'push', 'pop', 'jmp', 'inc', 'mov', 'call', 'mov', 'mov', 'cmp', 'je']
    cfg = ControlFlowGraph(disassembly)
    cfg.draw()
    
from capstone import *
import os

def process_files_in_directory(out_file, directory, malware=False):
    print(f'Processing files in directory \'{directory}\'...')
    for filename in os.listdir(directory):
        filepath = os.path.join(directory, filename)
        if os.path.isfile(filepath):
            # Wywołanie funkcji disassemble_binary dla każdego pliku
            disassemble_binary(out_file, filepath.replace('\\', '/'), malware)
        elif os.path.isdir(filepath):
            # Jeśli napotkano podkatalog, rekurencyjnie przetwarzamy jego zawartość
            process_files_in_directory(out_file, filepath, malware)

def disassemble_binary(out_file, file_path, malware=False):
    # Initialize Capstone disassembler
    md = Cs(CS_ARCH_X86, CS_MODE_64)
    
    # Read binary file
    with open(file_path, 'rb') as f:
        code = f.read()
    
    # Disassemble code and print instructions
    for insn in md.disasm(code, 0x1000):  # Start disassembly at address 0x1000
        # print(f"0x{insn.address:x}:\t{insn.mnemonic}\t{insn.op_str}")
        out_file.write(f"{insn.mnemonic} ")
    out_file.write(f';{malware}\n')


print(f'Starting processing')

with open('./output/opcodes', 'r+') as f:
    print(f'Cleaning old opcodes')
    f.truncate(0)

with open('./output/opcodes', 'a') as f:
    process_files_in_directory(f, "./androzoo/dataset/malware/", malware=True)
    process_files_in_directory(f, "./androzoo/dataset/benign/", malware=False)


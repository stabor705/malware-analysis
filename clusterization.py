from control_flow_graph import ControlFlowGraph

from sklearn.neighbors import KNeighborsClassifier
from sklearn.manifold import SpectralEmbedding

import numpy as np

if __name__ == "__main__":
    disassembly = ['cmp', 'jne', 'inc', 'mov', 'call', 'mov', 'mov', 'cmp', 'je', 'cmp', 'je', 'mov', 'cmp', 'je', 'add', 'jnz', 'dec', 'jne', 'inc', 'push', 'pop', 'jmp', 'dec', 'cmp', 'je', 'push', 'push', 'call', 'pop', 'pop', 'push', 'pop', 'jmp', 'inc', 'mov', 'call', 'mov', 'mov', 'cmp', 'je']
    disassembly2 = ['jne', 'jne', 'inc', 'mov', 'call', 'mov', 'mov', 'cmp', 'je', 'cmp', 'je', 'mov', 'cmp', 'je', 'add', 'jnz', 'dec', 'jne', 'inc', 'push', 'pop', 'jmp', 'dec', 'cmp', 'je', 'push', 'push', 'call', 'pop', 'pop', 'push', 'pop', 'jmp', 'inc', 'mov', 'call', 'mov', 'mov', 'je', 'je']
    disassembly3 = ['jne', 'jne', 'inc', 'mov', 'call', 'mov', 'mov', 'cmp', 'je', 'cmp', 'je', 'mov', 'cmp', 'je', 'add', 'jnz', 'dec', 'jne', 'inc', 'push', 'pop', 'jmp', 'dec', 'cmp', 'je', 'push', 'call', 'call', 'pop', 'pop', 'push', 'pop', 'jmp', 'inc', 'mov', 'call', 'mov', 'mov', 'je', 'je']
    cfg = ControlFlowGraph(disassembly)
    cfg2 = ControlFlowGraph(disassembly2)
    cfg3 = ControlFlowGraph(disassembly3)

    _, eigenvectors1 = np.linalg.eigh(cfg.matrix())
    _, eigenvectors2 = np.linalg.eigh(cfg2.matrix())
    _, eigenvectors3 = np.linalg.eigh(cfg3.matrix())

    embedding1 = np.mean(eigenvectors1, 0)
    print(embedding1.shape)
    embedding2 = np.mean(eigenvectors2, 0)
    print(embedding2.shape)
    embedding3 = np.mean(eigenvectors3, 0)
    print(embedding3.shape)

    X_train = np.random.rand(100, 5)  # 100 samples, 5 features
    y_train = np.random.randint(0, 2, 100)  # binary labels
    print(X_train.shape)
    print(y_train.shape)

    X = np.vstack([embedding1, embedding2])
    print(X.shape)
    y = np.array([1, 1])
    print(y.shape)
    knn = KNeighborsClassifier(n_neighbors=2)
    knn.fit(X, y)
    print(knn.predict(embedding3.reshape(1, -1)))